version: '3.4'

services:
  postgresql:
    image: postgres:latest
    container_name: postgresql
    networks:
      - sag
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5

  umserver:
    image: softwareag/universalmessaging-server:10.15
    container_name: umserver
    networks:
      - sag
    ports:
      - "9000:9000"
    volumes:
      - um-data-volume:/opt/softwareag/UniversalMessaging/server/umserver/data
      - um-conf-volume:/opt/softwareag/common/conf
      - ${UM_LICENSE_PATH}:/opt/softwareag/UniversalMessaging/server/umserver/licence/licence.xml:ro
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "localhost:9000"]
      interval: 30s
      timeout: 10s
      retries: 3

  msrdce:
    container_name: msrdce
    image: staillansag/msr-dce-dev:latest
    depends_on:
      umserver:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    networks:
      - sag
    ports:
      - "15555:5555"
    volumes:
      - ${MSR_LICENSE_PATH}:/opt/softwareag/IntegrationServer/config/licenseKey.xml:ro
      - ${MICROSERVICE_HOME}/application.properties:/opt/softwareag/IntegrationServer/application.properties
      - ${MICROSERVICE_HOME}:/opt/softwareag/IntegrationServer/packages/HelloWorld
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "localhost:5555"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  sag:

volumes:
  postgres-volume:
  um-data-volume:
  um-conf-volume:
